name: Nightly rebuild trigger

on:
  workflow_dispatch:
  schedule:
    - cron:  '38 3 * * *'

jobs:
  filter-update-tags:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{steps.getdata.outputs.versions }}
    steps:
      - name: Get Git tags and determine value
        id: getdata
        uses: satackey/action-js-inline@v0.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          required-packages: semver
          script: |
            const semver = require('semver')
            const github = require('@actions/github');
            const core = require('@actions/core');
            
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN)

            const tags = [];
            async function *listAllTags() {
              let i = 1;
              let tags_page;
              do {
                console.log(i);
                const response = await octokit.rest.repos.listTags({
                  owner: github.context.repo.owner,
                  repo: github.context.repo.repo,
                  per_page: 100,
                  page: i++
                })
                tags_page = response.data.map(t => t.name);
                console.log(tags_page);
                yield tags_page;
              } while (tags_page.length);
            }
            for await (const snippet of listAllTags()) {
              tags.push(...snippet);
            }

            // Filter for SemVer-valid Git tags
            const versions = tags.filter(t => semver.valid(t))
                                 .filter(v => !semver.prerelease(v))
                                 .filter(v => semver.major(v) != 0);

            const allMajors = new Set(versions.map(v => semver.major(v)));
            const ranges = [...allMajors].map(v => '~'+v);
            const matches = new Set();
            for (const range of ranges) {
              const match = semver.maxSatisfying(versions, range);
              if (match) matches.add(match);
            }

            core.setOutput('versions', JSON.stringify(versions));

  trigger-nightly-updates:
    needs: filter-update-tags
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{ fromJSON(needs.filter-update-tags.outputs.versions) }}
    steps:
      - name: Invoke workflow without inputs
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: docker-semver-tags-multiple-flavors.yaml
          ref: ${{ matrix.versions }}
          inputs: '{"force_build": false}'